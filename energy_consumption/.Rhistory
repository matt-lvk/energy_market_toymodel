# Load required packages
library(fpp3)
library(readr)
library(tsibble)
library(dplyr)
library(forecast)
installed.packages("fable")
install.packages("fable.prophet")
# Load required packages
library(fpp3)
library(readr)
library(tsibble)
library(dplyr)
library(forecast)
x <- 10
data <- read_csv("./data/PJME_hourly.csv",
col_types = cols(
Datetime = col_datetime(format = "%Y-%m-%d %H:%M:%S"),
PJME_MW = col_double()
))
data <- data |>
filter(Datetime >= as.POSIXct("2017-01-01"))
data <- read_csv("./data/PJME_hourly.csv",
col_types = cols(
Datetime = col_datetime(format = "%Y-%m-%d %H:%M:%S"),
PJME_MW = col_double()
))
data <- data |>
filter(Datetime >= as.POSIXct("2017-01-01"))
duplicates <- data |>
group_by(Datetime) |>
filter(n() > 1)
data_unique <- data |>
group_by(Datetime) |>
summarise(PJME_MW = mean(PJME_MW, na.rm = TRUE)) |>
ungroup()
ts_data <- as_tsibble(data_unique, index = Datetime) |> fill_gaps()
ts_data |>
fill_gaps() |>
autoplot() +
labs(y = "MW",
title = "PJME Hourly")
fit_pjme <- ts_data |>
model(TSLM(PJME_MW ~ trend() + season()))
train <- ts_data |>
filter(Datetime >= as.POSIXct("2018-05-01"))
View(train)
View(train)
traub |> autoplot()
train |> autoplot()
train <- ts_data |>
filter(Datetime < as.POSIXct("2018-05-01"))
train |> autoplot()
fit_arima <- train |> model(ARIMA(ts_data))
report(fit_arima)
fit_arima <- train |> model(ARIMA(ts_data))
fit_arima <- train |> model(ARIMA(PJME_MW))
report(fit_arima)
fit_arima |> gg_tsresiduals(lag_max = 16)
fit_arima |> gg_tsresiduals(lag_max = 20)
fit_arima |> gg_tsresiduals(lag_max = 50)
ts_data |> autoplot()
augment(fit_arima) |>
features(.innov, ljung_box, lag = 8, dof = 5)
fit_ets <- train |> model(ETS(PJME_MW))
report(fit_ets)
fit_ets <- train |> model(ETS(PJME_MW))
summary(train)
install.packages("naniar")
vis_miss(train)
library(naniar)
vis_miss(train)
####### compare ARIMA vs ETS ###########
train_clean <- train |>
drop_na()
a
fit_arima <- train_clean |> model(ARIMA(PJME_MW))
report(fit_arima)
fit_arima <- train |> model(ARIMA(PJME_MW))
report(fit_arima)
fit_arima |> gg_tsresiduals(lag_max = 50)
augment(fit_arima) |>
features(.innov, ljung_box, lag = 8, dof = 5)
train_clean <- train |>
drop_na()
fit_ets <- train |> model(ETS(PJME_MW))
report(fit_ets)
fit_ets |>
gg_tsresiduals(lag_max = 16)
train_clean <- train |>
drop_na()
fit_ets <- train |> model(ETS(PJME_MW))
fit_ets <- train_clean |> model(ETS(PJME_MW))
train_clean <- train |> fill_gaps()
fit_ets <- train_clean |> model(ETS(PJME_MW))
report(fit_ets)
fit_ets |>
gg_tsresiduals(lag_max = 16)
train_clean <- train |> fill_gaps()
fit_ets <- train_clean |> model(ETS(PJME_MW))
summary(train_clean)
train_clean <- train |>
fill(PJME_MW, .direction = "downup")
fit_ets <- train_clean |> model(ETS(PJME_MW))
report(fit_ets)
fit_ets |>
gg_tsresiduals(lag_max = 16)
augment(fit_ets) |>
features(.innov, ljung_box, lag = 8)
# Generate forecasts and compare accuracy over the test set
bind_rows(
fit_arima |> accuracy(),
fit_ets |> accuracy(),
fit_arima |> forecast(h = 10) |> accuracy(cement),
fit_ets |> forecast(h = 10) |> accuracy(cement)
) |>
select(-ME, -MPE, -ACF1)
# Generate forecasts and compare accuracy over the test set
bind_rows(
fit_arima |> accuracy(),
fit_ets |> accuracy(),
fit_arima |> forecast(h = 10) |> accuracy(PJME_MW),
fit_ets |> forecast(h = 10) |> accuracy(PJME_MW)
) |>
select(-ME, -MPE, -ACF1)
# Generate forecasts and compare accuracy over the test set
bind_rows(
fit_arima |> accuracy(),
fit_ets |> accuracy(),
fit_arima |> forecast(h = 10) |> accuracy(ts_data),
fit_ets |> forecast(h = 10) |> accuracy(ts_data)
) |>
select(-ME, -MPE, -ACF1)
# graph
ts_data |>
model(ARIMA(Cement)) |>
forecast(h="3 years") |>
autoplot(cement) +
labs(title = "Cement production in Australia",
y = "Tonnes ('000)")
# graph
ts_data |>
model(ARIMA(PJME_MW)) |>
forecast(h="3 years") |>
autoplot(ts_data) +
labs(title = "Cement production in Australia",
y = "Tonnes ('000)")
# graph
ts_data |>
model(ARIMA(PJME_MW)) |>
forecast(h="3 years") |>
autoplot(ts_data) +
labs(title = "Cement production in Australia",
y = "Tonnes ('000)")
# graph
ts_data |>
model(ARIMA(PJME_MW)) |>
forecast(h="3 months") |>
autoplot(ts_data) +
labs(title = "Cement production in Australia",
y = "Tonnes ('000)")
# graph
ts_data |>
model(ARIMA(PJME_MW)) |>
forecast(h=24) |>
autoplot(ts_data) +
labs(title = "Cement production in Australia",
y = "Tonnes ('000)")
# graph
ts_data |>
model(ARIMA(PJME_MW)) |>
forecast(h=24) |>
autoplot(ts_data) +
labs(title = "Cement production in Australia",
y = "Tonnes ('000)")
vic_elec
head(vic_elec)
# graph
ts_data |>
model(ETS(PJME_MW)) |>
filter(year(Datetime) == 2018) |>
forecast(h=24) |>
autoplot(ts_data) +
labs(title = "PJME with forecast 24 hrs",
y = "MW")
# graph
ts_data |>
model(ARIMA(PJME_MW)) |>
filter(year(Datetime) == 2018) |>
forecast(h=24) |>
autoplot(ts_data) +
labs(title = "PJME with forecast 24 hrs",
y = "MW")
install.packages("xgboost")
